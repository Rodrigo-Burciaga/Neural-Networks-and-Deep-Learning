{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NN from scratch vectorized V2 cross entropy","version":"0.3.2","provenance":[{"file_id":"1bd03kkEsAPO6JNvzBBUFXK1WRL6VI5wf","timestamp":1565290339520},{"file_id":"1oS7NtRpa0IC_d0fNDsf_DNO7HfmUcVQm","timestamp":1564793862009}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"9PwxdHcvp1NA","colab_type":"code","colab":{}},"source":["#importing dependencies\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","import gzip\n","import numpy as np\n","import random\n","import json\n","import sys\n","try:\n","    import cPickle as pickle\n","except:\n","    import pickle"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sNyunLupc-sS","colab_type":"text"},"source":["# Load Data"]},{"cell_type":"code","metadata":{"id":"vMdbpi52XYcd","colab_type":"code","outputId":"d1bbacad-f884-42e3-8b13-c7d9a857b554","executionInfo":{"status":"ok","timestamp":1565579865881,"user_tz":300,"elapsed":3702,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":104}},"source":["!git clone https://github.com/mnielsen/neural-networks-and-deep-learning.git"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Cloning into 'neural-networks-and-deep-learning'...\n","remote: Enumerating objects: 1163, done.\u001b[K\n","remote: Total 1163 (delta 0), reused 0 (delta 0), pack-reused 1163\u001b[K\n","Receiving objects: 100% (1163/1163), 20.42 MiB | 22.54 MiB/s, done.\n","Resolving deltas: 100% (577/577), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0mPqTzwDbqfO","colab_type":"code","outputId":"20d9148c-2cc5-4e12-c579-48cc46df84b7","executionInfo":{"status":"ok","timestamp":1565579873358,"user_tz":300,"elapsed":554,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%cd neural-networks-and-deep-learning/"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/content/neural-networks-and-deep-learning\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mfFSaYAMYWxW","colab_type":"code","colab":{}},"source":["\"\"\"Class whose aim is to load data from the serialization file, and give it a\n","format to can be used in our code\"\"\"\n","class DataLoader(object):\n","  \n","  def load_data(self):\n","    with gzip.open('data/mnist.pkl.gz','rb') as ff :\n","        u = pickle._Unpickler( ff )\n","        u.encoding = 'latin1'\n","        training_data, validation_data, test_data= u.load()\n","    return (training_data, validation_data, test_data)\n","  \n","  def load_data_wrapper(self):\n","    tr_d, va_d, te_d = self.load_data()\n","    training_inputs = [np.reshape(x, (784, 1)) for x in tr_d[0]]\n","    training_results = [ self.vectorized_result(y) for y in tr_d[1]]\n","    training_data = zip(training_inputs, training_results)\n","    validation_inputs = [np.reshape(x, (784, 1)) for x in va_d[0]]\n","    validation_data = zip(validation_inputs, va_d[1])\n","    test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]\n","    test_data = zip(test_inputs, te_d[1])\n","    return (training_data, validation_data, test_data)\n","  \n","  def vectorized_result(self, j):\n","    e = np.zeros((10, 1))\n","    e[j] = 1.0\n","    return e"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mo5YWQ0qiVeU","colab_type":"code","colab":{}},"source":["data_loader = DataLoader()\n","training_data, validation_data, test_data = data_loader.load_data_wrapper()\n","training_data, validation_data, test_data = list(training_data), \\\n","list(validation_data), list(test_data)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3jeYfgbimLMa","colab_type":"code","outputId":"a771270d-d353-42f4-95e6-1919ddb849cd","executionInfo":{"status":"ok","timestamp":1565579915017,"user_tz":300,"elapsed":494,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["#inspecting the data\n","print(training_data[0][0].shape)\n","img = np.reshape(training_data[0][0], (28,28))\n","plt.imshow(img, cmap='gray')\n","title_obj = plt.title('Número: {}'.format(np.argmax(training_data[0][1])))\n","plt.setp(title_obj, color='w')  \n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(784, 1)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAP8AAAEICAYAAACQ6CLfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEKNJREFUeJzt3X2MXPV1xvHvqQlRMC/GoVkcB+LY\noaYYkU1lTIusAkUOLwKBAaFYRXIKwfkDt6RqLKirBkhlahVMFIuIeCkQu0ocIgHCWGkxYMBpUS0W\nY8CYElxqGm8WG2qMX3gx9p7+ce/CADu/mZ25M3d2z/ORVjtzz9w7xyM/c9/3Z+6OiMTze2U3ICLl\nUPhFglL4RYJS+EWCUvhFglL4RYJS+EefI4FXgO6yG5HOpvCPDFuBHcDYimnfBp4Y4rX/CCwBNra8\nq+I4sA/Ym//8c7ntxKDwjxxjgGtrvOZzwCbgJ61v50OHFLScrwGH5z/fLmiZkqDwjxy3AN8Dxg1R\nm0S29vwAuCOf9gQfhehbwH8APwR2Aa8Cp+fTf0u2VTG3YnmfBW4F/hfYTvZl8rm8diawDbgOeB24\nJ59+NbAF2AmsAr7YwL9R2kjhHzl6yQL9vQbnPw14Hvg88HPgF8CpwFeBK4Dbyda6AIuBPyA7bvBV\nYCLw/YplHQuMB74MzAP+jGx343JgAvBavvxBq4Hra/S3juzL5H6yLzNpMYV/ZPk+8JfA7zcw7/+Q\nraUPAvcCxwE/AN4H1gD7yYJuZIH+a7K1+B7gZuCbFcsaAG7I530X+HPgbmBDPu1vgT/hoxBfQPaF\nUs0Z+WtPBH5H9mVR1O6EVKEPeGTZxEdr0ZeGOe/2isfvVpl2ONkXy2HAMxU1IzvmMOgN4L2K518k\nC/6gvcD/kW0xbK2jt3X57/1kxzV2A38IvFDHvNIgrflHnhvI9q8nVkzbl/8+rGLasQ0u/02yL4Jp\nZMcXxgFH8dEuAWTHFyr9jmwXYNBYst2LvgZ7cLIvHGkhhX/k2UK22f5XFdPeIAvaFWRr6CuBKQ0u\nfwC4k+zg4BfyaROBcxLzrAT+guwYwWfJdhPWU99af1o+3xiyL5glZP+W4W7ZyDAp/CPTD/j4OX/I\ntgYWkG1uTwOeamL515F9yfwn2Sb4o8DUxOsfBf4euA/oJ/viqTxG8K/AwirzdpF9me0mOwsxiewY\nwQcNdy91Mf0xD5GYtOYXCUrhFwlK4RcJSuEXCaqtF/mYmY4uirSYu9d1jURTa34zO9fMXjazLWZW\n69ptEekgDZ/qM7MxwG+AWWR3eT0NzHH3zYl5tOYXabF2rPlnAFvc/VV33092F9dFTSxPRNqomfBP\nJLsXfNA2Pn69OQBmNs/Mes2st4n3EpGCtfyAn7v3AD2gzX6RTtLMmr+P7J7wQV+i8bu4RKTNmgn/\n08AJZvYVMzuU7EaOVcW0JSKt1vBmv7sfMLP5wMNkt2Pe7e4vFtaZiLRUW+/q0z6/SOu15SIfERm5\nFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAU\nfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBR+kaAUfpGgFH6RoBoe\noltGhjFjxiTrRx11VEvff/78+VVrhx12WHLeqVOnJuvXXHNNsn7rrbdWrc2ZMyc573vvvZesL168\nOFm/6aabkvVO0FT4zWwrsAc4CBxw9+lFNCUirVfEmv8sd3+zgOWISBtpn18kqGbD78AaM3vGzOYN\n9QIzm2dmvWbW2+R7iUiBmt3sn+nufWb2BeARM/svd19X+QJ37wF6AMzMm3w/ESlIU2t+d+/Lf+8A\nHgBmFNGUiLRew+E3s7FmdsTgY+AbwKaiGhOR1mpms78LeMDMBpfzc3f/t0K6GmWOP/74ZP3QQw9N\n1k8//fRkfebMmVVr48aNS8576aWXJutl2rZtW7K+dOnSZH327NlVa3v27EnO+9xzzyXrTz75ZLI+\nEjQcfnd/Ffhagb2ISBvpVJ9IUAq/SFAKv0hQCr9IUAq/SFDm3r6L7kbrFX7d3d3J+tq1a5P1Vt9W\n26kGBgaS9SuvvDJZ37t3b8Pv3d/fn6y/9dZbyfrLL7/c8Hu3mrtbPa/Tml8kKIVfJCiFXyQohV8k\nKIVfJCiFXyQohV8kKJ3nL8D48eOT9fXr1yfrkydPLrKdQtXqfdeuXcn6WWedVbW2f//+5LxRr39o\nls7zi0iSwi8SlMIvEpTCLxKUwi8SlMIvEpTCLxKUhuguwM6dO5P1BQsWJOsXXHBBsv7ss88m67X+\nhHXKxo0bk/VZs2Yl6/v27UvWp02bVrV27bXXJueV1tKaXyQohV8kKIVfJCiFXyQohV8kKIVfJCiF\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"KaQ3AY9sIC5b","colab_type":"text"},"source":["#  Neural Network "]},{"cell_type":"code","metadata":{"id":"DwSI1YSD4SBv","colab_type":"code","colab":{}},"source":["class CrossEntropyCost(object):\n","\n","    @staticmethod\n","    def fn(a, y):\n","        return np.sum(np.nan_to_num(-y*np.log(a)-(1-y)*np.log(1-a)))\n","\n","    @staticmethod\n","    def delta(z, a, y):\n","        return (a-y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZSavizbe8KWY","colab_type":"code","colab":{}},"source":["class QuadraticCost(object):\n","\n","    @staticmethod\n","    def fn(a, y):\n","        return 0.5*np.linalg.norm(a-y)**2\n","\n","    @staticmethod\n","    def delta(z, a, y):\n","        return (a-y) * NeuralNetwork.sigmoid_prime(z)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WCdu9rE-xn1O","colab_type":"code","colab":{}},"source":["def vectorized_result(j):\n","    \"\"\"Return a 10-dimensional unit vector with a 1.0 in the j'th position\n","    and zeroes elsewhere.  This is used to convert a digit (0...9)\n","    into a corresponding desired output from the neural network.\n","\n","    \"\"\"\n","    e = np.zeros((10, 1))\n","    e[j] = 1.0\n","    return e\n","\n","#### Loading a Network\n","def load(filename):\n","  \"\"\"Load a neural network from the file ``filename``.  Returns an\n","  instance of Network.\n","\n","  \"\"\"\n","  f = open(filename, \"r\")\n","  data = json.load(f)\n","  f.close()\n","  cost = getattr(sys.modules[__name__], data[\"cost\"])\n","  net = NeuralNetwork(data[\"sizes\"], cost=cost)\n","  net.weights = [np.array(w) for w in data[\"weights\"]]\n","  net.biases = [np.array(b) for b in data[\"biases\"]]\n","  return net"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jjusEVNtI2xj","colab_type":"code","colab":{}},"source":["\"\"\"V2 \n","\n","An improved version of network.py, implementing the stochastic\n","gradient descent learning algorithm for a feedforward neural network.\n","Improvements include the addition of the cross-entropy cost function,\n","regularization, and better initialization of network weights.  Note\n","that I have focused on making the code simple, easily readable, and\n","easily modifiable.  It is not optimized, and omits many desirable\n","features.\n","\n","\"\"\"\n","\n","class NeuralNetwork(object):\n","  \n","  @staticmethod\n","  def sigmoid(z): \n","    return 1.0/(1.0+np.exp(-z))\n","  \n","  @staticmethod\n","  def sigmoid_prime(z):\n","    \"\"\"\"Derivative of the sigmoid function.\"\"\"\n","    return NeuralNetwork.sigmoid(z) * (1 - NeuralNetwork.sigmoid(z))\n","  \n","  def __init__(self, sizes, cost=CrossEntropyCost):\n","    self.num_layers = len(sizes)\n","    self.sizes = sizes \n","    self.default_weight_initializer()\n","    self.cost = cost\n","    \n","  def print_shapes(self):\n","    for weights, bias  in zip(self.weights, self.biases):\n","      print(weights.shape, bias.shape)\n","      \n","  def feedforward(self, a):\n","    for b, w in zip(self.biases, self.weights):\n","      a = NeuralNetwork.sigmoid(np.dot(w,a) + b)\n","    return a\n","  \n","  def SGD(self, training_data, epochs, mini_batch_size, eta, \n","          lmbda = 0.0,\n","          evaluation_data=None,\n","          monitor_evaluation_cost=False,\n","          monitor_evaluation_accuracy=False,\n","          monitor_training_cost=False,\n","          monitor_training_accuracy=False):\n","    \"\"\"Method that develops Stochastic Gradient Descent using mini batch\"\"\"\n","    if evaluation_data: n_data = len(evaluation_data)\n","    n = len(training_data)\n","    evaluation_cost, evaluation_accuracy = [], []\n","    training_cost, training_accuracy = [], []\n","    for j in range(epochs):\n","      random.shuffle(training_data)\n","      mini_batches = [\n","                training_data[k:k+mini_batch_size]\n","           for k in range(0, n, mini_batch_size)]\n","      for mini_batch in mini_batches:\n","        self.update_mini_batch(mini_batch, eta, lmbda, n)\n","      print(\"Epoch {} training complete\".format(j))\n","      if monitor_training_cost:\n","        cost = self.total_cost(training_data, lmbda)\n","        training_cost.append(cost)\n","        print(\"Cost on training data: {}\".format(cost))   \n","      if monitor_training_accuracy:\n","        accuracy = self.accuracy(training_data, convert = True)\n","        training_accuracy.append(accuracy)\n","        print(\"Accuracy on training data: {} / {}\".format(accuracy, n))\n","      if monitor_evaluation_cost:\n","        cost = self.total_cost(evaluation_data, lmbda, convert=True)\n","        evaluation_cost.append(cost)\n","        print(\"Cost on evaluation data: {}\".format(cost))   \n","      if monitor_evaluation_accuracy:\n","        accuracy = self.accuracy(evaluation_data)\n","        evaluation_accuracy.append(accuracy)\n","        print(\"Accuracy on evaluation data: {} / {}\".format(accuracy, n_data))\n","      print()\n","    return evaluation_cost, evaluation_accuracy, \\\n","            training_cost, training_accuracy\n","  \n","  def update_mini_batch(self, mini_batch, eta, lmbda, n):\n","    \"\"\"Update the network’s weights and biases by applying\n","    gradient descent using backpropagation to a single mini batch.\n","    The ‘‘mini_batch ‘‘ is a list of tuples ‘‘(x, y)‘‘, and ‘‘eta‘‘\n","    is the learning rate.\"\"\"\n","    x, y = self.flat_batch(mini_batch)\n","    db, dw = self.backprop(x,y)\n","    self.weights = [(1-eta*(lmbda/n))*w-(eta/len(mini_batch))*nw\n","                        for w, nw in zip(self.weights, dw)]\n","    self.biases = [b-(eta/len(mini_batch))*nb\n","                       for b, nb in zip(self.biases, db)]\n","\n","  def flat_batch(self, mini_batch):\n","    size = len(mini_batch)\n","    unziped = list(zip(*mini_batch)) \n","    x = np.asarray(unziped[0])\n","    x = x.reshape(size, x.shape[1])\n","    y = np.asarray(unziped[1])\n","    y = y.reshape(size, y.shape[1])\n","    return x.T, y.T\n","  \n","  def backprop(self, x, y):\n","    nabla_b = [np.zeros(b.shape) for b in self.biases]\n","    nabla_w = [np.zeros(w.shape) for w in self.weights]\n","    # feedforward\n","    activation = x\n","    activations = [x] # list to store all the activations, layer by layer\n","    zs = [] # list to store all the z vectors, layer by layer\n","    for b, w in zip(self.biases, self.weights):\n","      z = np.dot(w, activation) + b\n","      zs.append(z)\n","      #we are using sigmoid function for all layers\n","      activation = NeuralNetwork.sigmoid(z) \n","      activations.append(activation)  \n","    delta = self.cost.delta(zs[-1], activations[-1], y)\n","    nabla_b[-1] = np.sum(delta, axis = 1).reshape(delta.shape[0],1)\n","    nabla_w[-1] = np.dot(delta, activations[-2].T) \n","    for l in range (2,self.num_layers):\n","      z = zs[-l]\n","      sp = NeuralNetwork.sigmoid_prime(z)\n","      delta = np.dot(self.weights[-l+1].T, delta) * sp\n","      nabla_b[-l] = np.sum(delta, axis = 1).reshape(delta.shape[0],1)\n","      nabla_w[-l] = np.dot(delta, activations[-l-1].T)\n","      return (nabla_b, nabla_w)\n","    \n","  def cost_derivative(self, output_activations, y):\n","    \"\"\"The derivative of cuadratic error = a-y where a is the final output \n","    activation and y is the ground truth label\"\"\"\n","    return (output_activations - y)\n","  \n","  def default_weight_initializer(self):\n","    self.biases = [ np.random.rand(y,1) for y in self.sizes[1:]]\n","    self.weights = [np.random.randn(y, x)/np.sqrt(x)  \n","                    for x, y in zip(self.sizes[:-1], self.sizes[1:])]\n","    \n","  def total_cost(self, data, lmbda, convert=False):\n","        \"\"\"Return the total cost for the data set ``data``.  The flag\n","        ``convert`` should be set to False if the data set is the\n","        training data (the usual case), and to True if the data set is\n","        the validation or test data.  See comments on the similar (but\n","        reversed) convention for the ``accuracy`` method, above.\n","        \"\"\"\n","        cost = 0.0\n","        for x, y in data:\n","            a = self.feedforward(x)\n","            if convert: y = vectorized_result(y)\n","            cost += self.cost.fn(a, y)/len(data)\n","        cost += 0.5*(lmbda/len(data))*sum(\n","            np.linalg.norm(w)**2 for w in self.weights)\n","        return cost\n","  \n","  def accuracy(self, data, convert=False):\n","        \"\"\"Return the number of inputs in ``data`` for which the neural\n","        network outputs the correct result. The neural network's\n","        output is assumed to be the index of whichever neuron in the\n","        final layer has the highest activation.\n","\n","        The flag ``convert`` should be set to False if the data set is\n","        validation or test data (the usual case), and to True if the\n","        data set is the training data. The need for this flag arises\n","        due to differences in the way the results ``y`` are\n","        represented in the different data sets.  In particular, it\n","        flags whether we need to convert between the different\n","        representations.  It may seem strange to use different\n","        representations for the different data sets.  Why not use the\n","        same representation for all three data sets?  It's done for\n","        efficiency reasons -- the program usually evaluates the cost\n","        on the training data and the accuracy on other data sets.\n","        These are different types of computations, and using different\n","        representations speeds things up.  More details on the\n","        representations can be found in\n","        mnist_loader.load_data_wrapper.\n","\n","        \"\"\"\n","        if convert:\n","            results = [(np.argmax(self.feedforward(x)), np.argmax(y))\n","                       for (x, y) in data]\n","        else:\n","            results = [(np.argmax(self.feedforward(x)), y)\n","                        for (x, y) in data]\n","        return sum(int(x == y) for (x, y) in results)\n","\n","  def save(self, filename):\n","    \"\"\"Save the neural network to the file ``filename``.\"\"\"\n","    data = {\"sizes\": self.sizes,\n","            \"weights\": [w.tolist() for w in self.weights],\n","            \"biases\": [b.tolist() for b in self.biases],\n","            \"cost\": str(self.cost.__name__)}\n","    f = open(filename, \"w\")\n","    json.dump(data, f)\n","    f.close()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OCOmCr8QfCLB","colab_type":"code","outputId":"ae3c594c-54a6-4bff-8f2f-3d2486e58316","executionInfo":{"status":"ok","timestamp":1565582288455,"user_tz":300,"elapsed":386,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["net = NeuralNetwork([784, 250, 10], cost=CrossEntropyCost)\n","net.print_shapes()"],"execution_count":25,"outputs":[{"output_type":"stream","text":["(250, 784) (250, 1)\n","(10, 250) (10, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TeU3AydQ5XLl","colab_type":"code","outputId":"74ca7cf3-2c2e-45ce-f8e5-84dcc9cc512e","executionInfo":{"status":"ok","timestamp":1565582751740,"user_tz":300,"elapsed":459608,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["evaluation_cost, evaluation_accuracy, \\\n","training_cost, training_accuracy = net.SGD(training_data, 15, 10, 0.25,\n","        lmbda = 5.0,\n","        evaluation_data=validation_data,\n","        monitor_evaluation_accuracy=True,\n","        monitor_evaluation_cost=True,\n","        monitor_training_accuracy=True,\n","        monitor_training_cost=True)"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Epoch 0 training complete\n","Cost on training data: 0.4089868381570405\n","Accuracy on training data: 47417 / 50000\n","Cost on evaluation data: 0.6440199996335301\n","Accuracy on evaluation data: 9535 / 10000\n","\n","Epoch 1 training complete\n","Cost on training data: 0.32947098947412734\n","Accuracy on training data: 48283 / 50000\n","Cost on evaluation data: 0.6746636816387008\n","Accuracy on evaluation data: 9649 / 10000\n","\n","Epoch 2 training complete\n","Cost on training data: 0.28473863955377676\n","Accuracy on training data: 48825 / 50000\n","Cost on evaluation data: 0.6944201599197747\n","Accuracy on evaluation data: 9730 / 10000\n","\n","Epoch 3 training complete\n","Cost on training data: 0.28891035961957867\n","Accuracy on training data: 48797 / 50000\n","Cost on evaluation data: 0.7462633766168438\n","Accuracy on evaluation data: 9701 / 10000\n","\n","Epoch 4 training complete\n","Cost on training data: 0.25961115643803445\n","Accuracy on training data: 49076 / 50000\n","Cost on evaluation data: 0.743213261100903\n","Accuracy on evaluation data: 9768 / 10000\n","\n","Epoch 5 training complete\n","Cost on training data: 0.24357413216620305\n","Accuracy on training data: 49258 / 50000\n","Cost on evaluation data: 0.755658885895849\n","Accuracy on evaluation data: 9770 / 10000\n","\n","Epoch 6 training complete\n","Cost on training data: 0.25065206212752067\n","Accuracy on training data: 49240 / 50000\n","Cost on evaluation data: 0.7841394881115579\n","Accuracy on evaluation data: 9746 / 10000\n","\n","Epoch 7 training complete\n","Cost on training data: 0.25046998707081647\n","Accuracy on training data: 49377 / 50000\n","Cost on evaluation data: 0.7870115132549718\n","Accuracy on evaluation data: 9780 / 10000\n","\n","Epoch 8 training complete\n","Cost on training data: 0.23180109942903399\n","Accuracy on training data: 49447 / 50000\n","Cost on evaluation data: 0.7806552657960539\n","Accuracy on evaluation data: 9785 / 10000\n","\n","Epoch 9 training complete\n","Cost on training data: 0.23918415395967063\n","Accuracy on training data: 49429 / 50000\n","Cost on evaluation data: 0.7966604531946074\n","Accuracy on evaluation data: 9783 / 10000\n","\n","Epoch 10 training complete\n","Cost on training data: 0.22940177613726487\n","Accuracy on training data: 49488 / 50000\n","Cost on evaluation data: 0.795519239114617\n","Accuracy on evaluation data: 9794 / 10000\n","\n","Epoch 11 training complete\n","Cost on training data: 0.23413317682977824\n","Accuracy on training data: 49451 / 50000\n","Cost on evaluation data: 0.8017502825886953\n","Accuracy on evaluation data: 9784 / 10000\n","\n","Epoch 12 training complete\n","Cost on training data: 0.21746351133552635\n","Accuracy on training data: 49590 / 50000\n","Cost on evaluation data: 0.7934945359569281\n","Accuracy on evaluation data: 9806 / 10000\n","\n","Epoch 13 training complete\n","Cost on training data: 0.22039907747614446\n","Accuracy on training data: 49625 / 50000\n","Cost on evaluation data: 0.7999340837740696\n","Accuracy on evaluation data: 9803 / 10000\n","\n","Epoch 14 training complete\n","Cost on training data: 0.2173544372970566\n","Accuracy on training data: 49636 / 50000\n","Cost on evaluation data: 0.7959336431353146\n","Accuracy on evaluation data: 9801 / 10000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0Tn_PIGvT2pl","colab_type":"code","outputId":"ec4eafd0-03db-4058-da46-0b73e8b9f10b","executionInfo":{"status":"ok","timestamp":1565459447564,"user_tz":300,"elapsed":2014,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["results = net.accuracy(test_data)\n","print('Missclassified: ', len(test_data) - results)\n","results = [(np.argmax(net.feedforward(x)), y)\n","                        for (x, y) in test_data]\n","indexes = []\n","for i, (x, y) in enumerate(results):\n","  if(x != y):\n","    indexes.append(i)\n","\n","print(indexes)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Missclassified:  196\n","[8, 247, 259, 321, 445, 447, 449, 495, 551, 613, 619, 659, 684, 691, 720, 882, 938, 951, 956, 965, 1014, 1039, 1044, 1112, 1156, 1181, 1192, 1226, 1232, 1242, 1247, 1260, 1299, 1319, 1328, 1378, 1393, 1414, 1494, 1500, 1522, 1530, 1549, 1553, 1609, 1621, 1626, 1678, 1681, 1709, 1754, 1790, 1871, 1878, 1901, 1940, 1941, 1952, 2044, 2053, 2070, 2109, 2118, 2130, 2135, 2189, 2266, 2272, 2293, 2299, 2325, 2369, 2387, 2414, 2422, 2433, 2488, 2607, 2610, 2648, 2654, 2896, 2921, 2927, 2939, 2952, 2953, 3030, 3060, 3073, 3117, 3130, 3422, 3503, 3520, 3549, 3550, 3558, 3559, 3597, 3776, 3780, 3796, 3811, 3818, 3853, 3906, 3926, 3941, 3943, 3976, 3985, 4063, 4065, 4075, 4078, 4163, 4176, 4199, 4224, 4248, 4289, 4306, 4369, 4497, 4500, 4536, 4690, 4740, 4761, 4807, 4823, 4874, 4880, 4966, 5331, 5457, 5600, 5642, 5676, 5734, 5749, 5887, 5937, 5955, 5973, 6035, 6059, 6065, 6093, 6173, 6400, 6426, 6505, 6555, 6568, 6571, 6576, 6597, 6625, 6632, 6651, 6783, 7216, 7434, 7459, 7800, 7821, 7886, 7990, 8094, 8246, 8277, 8522, 9009, 9015, 9024, 9280, 9530, 9587, 9634, 9642, 9664, 9692, 9729, 9745, 9749, 9768, 9770, 9777, 9779, 9808, 9811, 9839, 9867, 9944]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EPXTlVaYTwW-","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"Jr-Z7Vv6yrgW","colab_type":"text"},"source":["# Testing Neural Network"]},{"cell_type":"code","metadata":{"id":"UkoP4GXufzhD","colab_type":"code","outputId":"9a9bc5ea-3a67-4960-bb5c-6535200dd5e5","executionInfo":{"status":"ok","timestamp":1565459324894,"user_tz":300,"elapsed":374,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":304}},"source":["predicted = net.feedforward(test_data[1][0])\n","print(np.argmax(predicted))\n","img = np.reshape(test_data[1][0], (28, 28))\n","plt.imshow(img, cmap='gray')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f455bb7fc50>"]},"metadata":{"tags":[]},"execution_count":91},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAP8AAAD8CAYAAAC4nHJkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAADXZJREFUeJzt3X+IHPUZx/HPU5uAaFGT0uMwttGo\nhSj+CKcUCaVFjVZiYkA0wT9SWnr9o0LF+ItUUChiKf1B/wpEDCba2jRcjFFL0zZUTSEJOSVGo1ET\nuWjCJdcQ0QSRmuTpHzvXXvXmu5uZ2Z29PO8XHLc7z+7Mw3Kfm5md3e/X3F0A4vlS3Q0AqAfhB4Ii\n/EBQhB8IivADQRF+ICjCDwRF+IGgCD8Q1Jc7uTEz4+OEQJu5u7XyuFJ7fjO70czeNrPdZvZAmXUB\n6Cwr+tl+MztN0juSrpe0T9I2SYvc/c3Ec9jzA23WiT3/1ZJ2u/t77v5vSX+UNL/E+gB0UJnwnyvp\ngzH392XL/o+Z9ZvZoJkNltgWgIq1/Q0/d18uabnEYT/QTcrs+fdLOm/M/WnZMgATQJnwb5N0kZmd\nb2aTJS2UtL6atgC0W+HDfnc/ZmZ3Stog6TRJK9x9Z2WdAWirwpf6Cm2Mc36g7TryIR8AExfhB4Ii\n/EBQhB8IivADQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBdXTobhRzzz33JOunn356bu2y\nyy5LPvfWW28t1NOoZcuWJeubN2/OrT355JOlto1y2PMDQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCM\n3tsFVq9enayXvRZfpz179uTWrrvuuuRz33///arbCYHRewEkEX4gKMIPBEX4gaAIPxAU4QeCIvxA\nUKW+z29mQ5KOSDou6Zi791XR1Kmmzuv4u3btStY3bNiQrF9wwQXJ+s0335ysz5gxI7d2xx13JJ/7\n6KOPJusop4rBPL7r7ocqWA+ADuKwHwiqbPhd0l/N7BUz66+iIQCdUfawf7a77zezr0n6m5ntcveX\nxz4g+6fAPwagy5Ta87v7/uz3iKRnJF09zmOWu3sfbwYC3aVw+M3sDDP7yuhtSXMkvVFVYwDaq8xh\nf4+kZ8xsdD1/cPe/VNIVgLYrHH53f0/S5RX2MmH19aXPaBYsWFBq/Tt37kzW582bl1s7dCh9Ffbo\n0aPJ+uTJk5P1LVu2JOuXX57/JzJ16tTkc9FeXOoDgiL8QFCEHwiK8ANBEX4gKMIPBMUU3RXo7e1N\n1rPPQuRqdinvhhtuSNaHh4eT9TKWLFmSrM+cObPwul944YXCz0V57PmBoAg/EBThB4Ii/EBQhB8I\nivADQRF+ICiu81fgueeeS9YvvPDCZP3IkSPJ+uHDh0+6p6osXLgwWZ80aVKHOkHV2PMDQRF+ICjC\nDwRF+IGgCD8QFOEHgiL8QFBc5++AvXv31t1CrnvvvTdZv/jii0utf+vWrYVqaD/2/EBQhB8IivAD\nQRF+ICjCDwRF+IGgCD8QlLl7+gFmKyTNlTTi7pdmy6ZIWi1puqQhSbe5+4dNN2aW3hgqN3fu3GR9\nzZo1yXqzKbpHRkaS9dR4AC+99FLyuSjG3dMTRWRa2fM/IenGzy17QNJGd79I0sbsPoAJpGn43f1l\nSZ8fSma+pJXZ7ZWSbqm4LwBtVvScv8fdR+eIOiCpp6J+AHRI6c/2u7unzuXNrF9Sf9ntAKhW0T3/\nQTPrlaTsd+67Pu6+3N373L2v4LYAtEHR8K+XtDi7vVjSs9W0A6BTmobfzJ6WtFnSN81sn5n9UNIv\nJF1vZu9Kui67D2ACaXrO7+6LckrXVtwL2qCvL3221ew6fjOrV69O1rmW3734hB8QFOEHgiL8QFCE\nHwiK8ANBEX4gKIbuPgWsW7cutzZnzpxS6161alWy/uCDD5ZaP+rDnh8IivADQRF+ICjCDwRF+IGg\nCD8QFOEHgmo6dHelG2Po7kJ6e3uT9ddeey23NnXq1ORzDx06lKxfc801yfqePXuSdXRelUN3AzgF\nEX4gKMIPBEX4gaAIPxAU4QeCIvxAUHyffwIYGBhI1ptdy0956qmnknWu45+62PMDQRF+ICjCDwRF\n+IGgCD8QFOEHgiL8QFBNr/Ob2QpJcyWNuPul2bKHJf1I0r+yhy119z+3q8lT3bx585L1WbNmFV73\niy++mKw/9NBDhdeNia2VPf8Tkm4cZ/lv3f2K7IfgAxNM0/C7+8uSDnegFwAdVOac/04z22FmK8zs\nnMo6AtARRcO/TNIMSVdIGpb067wHmlm/mQ2a2WDBbQFog0Lhd/eD7n7c3U9IekzS1YnHLnf3Pnfv\nK9okgOoVCr+ZjR1OdoGkN6ppB0CntHKp72lJ35H0VTPbJ+khSd8xsyskuaQhST9uY48A2qBp+N19\n0TiLH29DL6esZt+3X7p0abI+adKkwtvevn17sn706NHC68bExif8gKAIPxAU4QeCIvxAUIQfCIrw\nA0ExdHcHLFmyJFm/6qqrSq1/3bp1uTW+sos87PmBoAg/EBThB4Ii/EBQhB8IivADQRF+IChz985t\nzKxzG+sin376abJe5iu7kjRt2rTc2vDwcKl1Y+Jxd2vlcez5gaAIPxAU4QeCIvxAUIQfCIrwA0ER\nfiAovs9/CpgyZUpu7bPPPutgJ1/00Ucf5daa9dbs8w9nnXVWoZ4k6eyzz07W77777sLrbsXx48dz\na/fff3/yuZ988kklPbDnB4Ii/EBQhB8IivADQRF+ICjCDwRF+IGgml7nN7PzJK2S1CPJJS1399+Z\n2RRJqyVNlzQk6TZ3/7B9rSLPjh076m4h15o1a3JrzcYa6OnpSdZvv/32Qj11uwMHDiTrjzzySCXb\naWXPf0zSEnefKelbkn5iZjMlPSBpo7tfJGljdh/ABNE0/O4+7O6vZrePSHpL0rmS5ktamT1spaRb\n2tUkgOqd1Dm/mU2XdKWkrZJ63H30uO2AGqcFACaIlj/bb2ZnShqQdJe7f2z2v2HC3N3zxuczs35J\n/WUbBVCtlvb8ZjZJjeD/3t3XZosPmllvVu+VNDLec919ubv3uXtfFQ0DqEbT8FtjF/+4pLfc/Tdj\nSuslLc5uL5b0bPXtAWiXpkN3m9lsSZskvS7pRLZ4qRrn/X+S9HVJe9W41He4ybpCDt29du3aZH3+\n/Pkd6iSWY8eO5dZOnDiRW2vF+vXrk/XBwcHC6960aVOyvmXLlmS91aG7m57zu/s/JeWt7NpWNgKg\n+/AJPyAowg8ERfiBoAg/EBThB4Ii/EBQTNHdBe67775kvewU3imXXHJJst7Or82uWLEiWR8aGiq1\n/oGBgdzarl27Sq27mzFFN4Akwg8ERfiBoAg/EBThB4Ii/EBQhB8Iiuv8wCmG6/wAkgg/EBThB4Ii\n/EBQhB8IivADQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFCEHwiK8ANBEX4gqKbhN7PzzOwfZvamme00\ns59myx82s/1mtj37uan97QKoStPBPMysV1Kvu79qZl+R9IqkWyTdJumou/+q5Y0xmAfQdq0O5vHl\nFlY0LGk4u33EzN6SdG659gDU7aTO+c1suqQrJW3NFt1pZjvMbIWZnZPznH4zGzSzwVKdAqhUy2P4\nmdmZkl6S9Ii7rzWzHkmHJLmkn6txavCDJuvgsB9os1YP+1sKv5lNkvS8pA3u/ptx6tMlPe/ulzZZ\nD+EH2qyyATzNzCQ9LumtscHP3ggctUDSGyfbJID6tPJu/2xJmyS9LulEtnippEWSrlDjsH9I0o+z\nNwdT62LPD7RZpYf9VSH8QPsxbj+AJMIPBEX4gaAIPxAU4QeCIvxAUIQfCIrwA0ERfiAowg8ERfiB\noAg/EBThB4Ii/EBQTQfwrNghSXvH3P9qtqwbdWtv3dqXRG9FVdnbN1p9YEe/z/+FjZsNuntfbQ0k\ndGtv3dqXRG9F1dUbh/1AUIQfCKru8C+vefsp3dpbt/Yl0VtRtfRW6zk/gPrUvecHUJNawm9mN5rZ\n22a228weqKOHPGY2ZGavZzMP1zrFWDYN2oiZvTFm2RQz+5uZvZv9HneatJp664qZmxMzS9f62nXb\njNcdP+w3s9MkvSPpekn7JG2TtMjd3+xoIznMbEhSn7vXfk3YzL4t6aikVaOzIZnZLyUddvdfZP84\nz3H3+7ukt4d1kjM3t6m3vJmlv68aX7sqZ7yuQh17/qsl7Xb399z935L+KGl+DX10PXd/WdLhzy2e\nL2lldnulGn88HZfTW1dw92F3fzW7fUTS6MzStb52ib5qUUf4z5X0wZj7+9RdU367pL+a2Stm1l93\nM+PoGTMz0gFJPXU2M46mMzd30udmlu6a167IjNdV4w2/L5rt7rMkfU/ST7LD267kjXO2brpcs0zS\nDDWmcRuW9Os6m8lmlh6QdJe7fzy2VudrN05ftbxudYR/v6Tzxtyfli3rCu6+P/s9IukZNU5TusnB\n0UlSs98jNffzX+5+0N2Pu/sJSY+pxtcum1l6QNLv3X1ttrj21268vup63eoI/zZJF5nZ+WY2WdJC\nSetr6OMLzOyM7I0YmdkZkuao+2YfXi9pcXZ7saRna+zl/3TLzM15M0ur5teu62a8dveO/0i6SY13\n/PdI+lkdPeT0dYGk17KfnXX3JulpNQ4DP1PjvZEfSpoqaaOkdyX9XdKULurtSTVmc96hRtB6a+pt\nthqH9Dskbc9+bqr7tUv0Vcvrxif8gKB4ww8IivADQRF+ICjCDwRF+IGgCD8QFOEHgiL8QFD/Abw9\nWv8QfFP9AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"GzgVZwnNzbcM","colab_type":"code","outputId":"d313f2ad-4094-442c-a5b1-8a56924bdf0d","executionInfo":{"status":"ok","timestamp":1565459469823,"user_tz":300,"elapsed":13436,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":593}},"source":["!pip install albumentations\n","!apt-get -qq install -y libsm6 libxext6 && pip install -q -U opencv-python\n","import cv2"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: albumentations in /usr/local/lib/python3.6/dist-packages (0.1.12)\n","Collecting imgaug<0.2.7,>=0.2.5 (from albumentations)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/2e/748dbb7bb52ec8667098bae9b585f448569ae520031932687761165419a2/imgaug-0.2.6.tar.gz (631kB)\n","\u001b[K     |████████████████████████████████| 634kB 1.4MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from albumentations) (1.16.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from albumentations) (1.3.0)\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.6/dist-packages (from albumentations) (3.4.5.20)\n","Requirement already satisfied: scikit-image>=0.11.0 in /usr/local/lib/python3.6/dist-packages (from imgaug<0.2.7,>=0.2.5->albumentations) (0.15.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from imgaug<0.2.7,>=0.2.5->albumentations) (1.12.0)\n","Requirement already satisfied: imageio>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (2.4.1)\n","Requirement already satisfied: matplotlib!=3.0.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (3.0.3)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (2.3)\n","Requirement already satisfied: pillow>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (4.3.0)\n","Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (1.0.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (1.1.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (2.4.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (0.10.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib!=3.0.0,>=2.0.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (2.5.3)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (4.4.0)\n","Requirement already satisfied: olefile in /usr/local/lib/python3.6/dist-packages (from pillow>=4.3.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (0.46)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from kiwisolver>=1.0.1->matplotlib!=3.0.0,>=2.0.0->scikit-image>=0.11.0->imgaug<0.2.7,>=0.2.5->albumentations) (41.0.1)\n","Building wheels for collected packages: imgaug\n","  Building wheel for imgaug (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for imgaug: filename=imgaug-0.2.6-cp36-none-any.whl size=654020 sha256=cbc2dfb000960c0fdf75fac7955967dffa60c192a67eebf5868ba4535a30d8f6\n","  Stored in directory: /root/.cache/pip/wheels/97/ec/48/0d25896c417b715af6236dbcef8f0bed136a1a5e52972fc6d0\n","Successfully built imgaug\n","Installing collected packages: imgaug\n","  Found existing installation: imgaug 0.2.9\n","    Uninstalling imgaug-0.2.9:\n","      Successfully uninstalled imgaug-0.2.9\n","Successfully installed imgaug-0.2.6\n","\u001b[K     |████████████████████████████████| 26.6MB 1.3MB/s \n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c6r4V0f60Gdn","colab_type":"code","outputId":"0c39215e-aa74-463b-81da-46c9f5f88b7e","executionInfo":{"status":"ok","timestamp":1565459482215,"user_tz":300,"elapsed":1437,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["!git clone https://github.com/Rodrigo-Burciaga/DataSets-and-Utils-NNDL.git"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Cloning into 'DataSets-and-Utils-NNDL'...\n","remote: Enumerating objects: 9, done.\u001b[K\n","remote: Counting objects:  11% (1/9)\u001b[K\rremote: Counting objects:  22% (2/9)\u001b[K\rremote: Counting objects:  33% (3/9)\u001b[K\rremote: Counting objects:  44% (4/9)\u001b[K\rremote: Counting objects:  55% (5/9)\u001b[K\rremote: Counting objects:  66% (6/9)\u001b[K\rremote: Counting objects:  77% (7/9)\u001b[K\rremote: Counting objects:  88% (8/9)\u001b[K\rremote: Counting objects: 100% (9/9)\u001b[K\rremote: Counting objects: 100% (9/9), done.\u001b[K\n","remote: Compressing objects:  12% (1/8)\u001b[K\rremote: Compressing objects:  25% (2/8)\u001b[K\rremote: Compressing objects:  37% (3/8)\u001b[K\rremote: Compressing objects:  50% (4/8)\u001b[K\rremote: Compressing objects:  62% (5/8)\u001b[K\rremote: Compressing objects:  75% (6/8)\u001b[K\rremote: Compressing objects:  87% (7/8)\u001b[K\rremote: Compressing objects: 100% (8/8)\u001b[K\rremote: Compressing objects: 100% (8/8), done.\u001b[K\n","Unpacking objects:  11% (1/9)   \rUnpacking objects:  22% (2/9)   \rUnpacking objects:  33% (3/9)   \rUnpacking objects:  44% (4/9)   \rUnpacking objects:  55% (5/9)   \rremote: Total 9 (delta 1), reused 5 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects:  66% (6/9)   \rUnpacking objects:  77% (7/9)   \rUnpacking objects:  88% (8/9)   \rUnpacking objects: 100% (9/9)   \rUnpacking objects: 100% (9/9), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z_b1V5Q21ASy","colab_type":"code","outputId":"dd2c120e-3530-4196-f25b-197eee973589","executionInfo":{"status":"ok","timestamp":1565459483828,"user_tz":300,"elapsed":555,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":538}},"source":["img = cv2.imread('DataSets-and-Utils-NNDL/n9.jpg', 0)\n","plt.imshow(img, cmap='gray')\n","plt.show()\n","img_rs = cv2.resize(img, (28,28))\n","ret, thresh = cv2.threshold(img_rs, 127, 255, cv2.THRESH_BINARY_INV)\n","plt.imshow(thresh, cmap='gray')\n","plt.show()\n","print(thresh.shape)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["(28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"910IampX1bCH","colab_type":"code","outputId":"a7edbb3e-8bf9-4055-8d2b-b9706a2e7b86","executionInfo":{"status":"ok","timestamp":1565459508887,"user_tz":300,"elapsed":339,"user":{"displayName":"Rodrigo Andrés Burciaga Ornelas","photoUrl":"","userId":"01811326954830511276"}},"colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["img_to_predict = np.reshape(thresh, (784,1))\n","predicted = net.feedforward(img_to_predict)\n","img = np.reshape(img_to_predict, (28, 28))\n","title_obj = plt.title('Número predecido: {}'.format(np.argmax(predicted)))\n","plt.setp(title_obj, color='w')  \n","plt.imshow(img, cmap='gray')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:17: RuntimeWarning: overflow encountered in exp\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\nPfNnD4sAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}